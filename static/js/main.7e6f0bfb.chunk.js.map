{"version":3,"sources":["pages/Home.js","pages/NotFound.js","components/WindowDimensionsProvider.js","App.js","components/DarkMode.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["Home","NotFound","WindowDimensionsCtx","createContext","WindowDimensionsProvider","children","useState","width","window","innerWidth","height","innerHeight","dimensions","setDimensions","useEffect","handleResize","addEventListener","removeEventListener","Provider","value","App","theme","setTheme","componentMounted","setComponentMounted","setMode","mode","localStorage","setItem","localTheme","getItem","matchMedia","matches","useDarkMode","toggleTheme","document","documentElement","classList","add","remove","loading","setLoading","linkHover","className","style","marginBottom","onChange","checked","size","speed","exact","path","href","target","rel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kMAMeA,EAJF,WACZ,OAAO,wCCGOC,MAJf,WACC,OAAO,sC,iBCDFC,G,OAAsBC,wBAAc,OA0B3BC,EAxBkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACbC,mBAAS,CAC3CC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,cAHgC,mBAC1CC,EAD0C,KAC9BC,EAD8B,KAiBjD,OAZAC,qBAAU,WACR,IAAMC,EAAe,WACnBF,EAAc,CACZN,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,eAInB,OADAH,OAAOQ,iBAAiB,SAAUD,GAC3B,WACLP,OAAOS,oBAAoB,SAAUF,MAEtC,IAED,kBAACb,EAAoBgB,SAArB,CAA8BC,MAAOP,GAClCP,ICmEQe,MAzEf,WAAgB,IAAD,ECfY,WAAO,IAAD,EACLd,mBAAS,SADJ,mBACxBe,EADwB,KACjBC,EADiB,OAEiBhB,oBAAS,GAF1B,mBAExBiB,EAFwB,KAENC,EAFM,KAGzBC,EAAU,SAACC,GACflB,OAAOmB,aAAaC,QAAQ,QAASF,GACrCJ,EAASI,IAuBX,OAZAZ,qBAAU,WACR,IAAMe,EAAarB,OAAOmB,aAAaG,QAAQ,SAC/CtB,OAAOuB,YACPvB,OAAOuB,WAAW,gCAAgCC,UACjDH,EACGJ,EAAQ,QACRI,EACAP,EAASO,GACTJ,EAAQ,SACZD,GAAoB,KACnB,IAEI,CAACH,EApBY,WAEhBI,EADY,UAAVJ,EACM,OAEA,UAgBgBE,GDZmBU,GADlC,mBACNZ,EADM,KACCa,EADD,KACcX,EADd,KAGC,SAAVF,EACFc,SAASC,gBAAgBC,UAAUC,IAAI,aAEvCH,SAASC,gBAAgBC,UAAUE,OAAO,aAN/B,MASiBjC,oBAAS,GAT1B,mBASNkC,EATM,KASGC,EATH,KAeb,GAJA3B,qBAAU,WACR2B,GAAW,KACV,CAACA,IAEAD,IAAYjB,EACd,OAAO,8BAIT,IAAMmB,EAAS,iDAEf,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,yBACEC,UAAU,4BACVC,MAAO,CAAEC,aAAc,UAEvB,kBAAC,IAAD,CACEC,SAAUZ,EACVa,QAAmB,SAAV1B,EACT2B,KAAM,OACNC,MAAO,KAGX,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACf,kBAAC,EAAD,OAIH,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,QAGJ,yBAAKR,UAAU,sDAAf,UACU,IACR,uBACEA,UAAS,oBAAeD,GACxBU,KAAK,qBACLC,OAAO,SACPC,IAAI,uBAJN,YAQA,6BACA,uBACEX,UAAS,oBAAeD,GACxBU,KAAK,oCACLC,OAAO,SACPC,IAAI,uBAJN,UAOK,IAlBP,gBEpDYC,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAAS2B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7e6f0bfb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Home = () => {\n\treturn <div>Hello!</div>;\n};\n\nexport default Home;\n","import React from \"react\";\n\nfunction NotFound() {\n\treturn <div>404!</div>;\n}\n\nexport default NotFound;\n","import React, { createContext, useContext, useState, useEffect } from \"react\";\n\nconst WindowDimensionsCtx = createContext(null);\n\nconst WindowDimensionsProvider = ({ children }) => {\n  const [dimensions, setDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  return (\n    <WindowDimensionsCtx.Provider value={dimensions}>\n      {children}\n    </WindowDimensionsCtx.Provider>\n  );\n};\n\nexport default WindowDimensionsProvider;\nexport const useWindowDimensions = () => useContext(WindowDimensionsCtx);\n","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// Import pages\nimport Home from \"./pages/Home\";\nimport NotFound from \"./pages/NotFound\";\n\n// Import dark mode\nimport { useDarkMode } from \"./components/DarkMode\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\n\n// Global CSS\nimport \"./App.css\";\n\n// Window dimensions\nimport WindowDimensionsProvider from \"./components/WindowDimensionsProvider\";\n\nfunction App() {\n  const [theme, toggleTheme, componentMounted] = useDarkMode();\n\n  if (theme === \"dark\") {\n    document.documentElement.classList.add(\"mode-dark\");\n  } else {\n    document.documentElement.classList.remove(\"mode-dark\");\n  }\n\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(false);\n  }, [setLoading]);\n\n  if (loading || !componentMounted) {\n    return <div />;\n  }\n\n  // general link hover style\n  const linkHover = `hover:text-blue-600 dark-hover:text-orange-500`;\n\n  return (\n    <Router>\n      <WindowDimensionsProvider>\n        <div\n          className=\"text-center w-screen pt-8\"\n          style={{ marginBottom: \"-1rem\" }}\n        >\n          <DarkModeToggle\n            onChange={toggleTheme}\n            checked={theme === \"dark\"}\n            size={\"3rem\"}\n            speed={5}\n          />\n        </div>\n        <Switch>\n          {/* Public Routes */}\n          <Route exact path=\"/\">\n            {<Home />}\n          </Route>\n\n          {/* Catch-all Route */}\n          <Route path=\"/\">\n            <NotFound />\n          </Route>\n        </Switch>\n        <div className=\"text-center pb-12 text-gray-800 dark:text-gray-200\">\n          Made by{\" \"}\n          <a\n            className={`underline ${linkHover}`}\n            href=\"https://kevinhu.io\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Kevin Hu\n          </a>\n          <br />\n          <a\n            className={`underline ${linkHover}`}\n            href=\"https://github.com/kevinhu/huoguo\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Source\n          </a>{\" \"}\n          on GitHub\n        </div>\n      </WindowDimensionsProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = useState(\"light\");\n  const [componentMounted, setComponentMounted] = useState(false);\n  const setMode = (mode) => {\n    window.localStorage.setItem(\"theme\", mode);\n    setTheme(mode);\n  };\n\n  const toggleTheme = () => {\n    if (theme === \"light\") {\n      setMode(\"dark\");\n    } else {\n      setMode(\"light\");\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem(\"theme\");\n    window.matchMedia &&\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches &&\n    !localTheme\n      ? setMode(\"dark\")\n      : localTheme\n      ? setTheme(localTheme)\n      : setMode(\"light\");\n    setComponentMounted(true);\n  }, []);\n\n  return [theme, toggleTheme, componentMounted];\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/main.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}