{"version":3,"sources":["assets/not_found.svg","components/DarkMode.js","themes.js","utilities.js","components/Navbar.js","components/Footer.js","components/WindowDimensionsProvider.js","pages/Home.js","pages/NotFound.js","components/Loading.js","components/PinyinCharacter.js","pages/Word.js","pages/Results.js","components/ScrollToTop.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DarkModeCtx","createContext","DarkModeProvider","children","useState","theme","setTheme","componentMounted","setComponentMounted","setMode","mode","window","localStorage","setItem","useEffect","localTheme","getItem","matchMedia","matches","document","documentElement","classList","add","remove","Provider","value","useDarkMode","useContext","linkHover","linkHoverScale","textPrimaryColor","textSecondaryColor","borderPrimaryColor","borderSecondaryColor","toneMarks","a","e","i","o","u","v","isAlpha","str","test","replaceAt","index","replacement","length","substring","convertPinyin","toneNumIndex","toLocaleLowerCase","search","firstVowelIndex","console","log","toneNum","parseInt","charAt","regExp","lastIndex","lastIndexOfRegex","vowel","pinyinify","undefined","includes","toLowerCase","replace","res","char","whitespaceIndex","numberWithCommas","x","toString","removeDuplicates","arr","reduce","b","indexOf","push","getCharacterLength","_","require","Navbar","toggleTheme","history","useHistory","location","useLocation","searchWord","setSearchWord","results","setResults","searchFocused","setSearchFocused","loading","setLoading","queryParams","queryString","parse","modeParam","executeSearch","useRef","debounce","query","fetch","then","response","json","body","current","searchContainer","checkSearchFocus","contains","target","addEventListener","removeEventListener","className","style","marginTop","to","onClick","location_split","pathname","split","filter","temp","join","stringify","onSubmit","event","preventDefault","ref","type","placeholder","onChange","persist","onFocus","css","size","color","marginLeft","map","result","key","checked","Footer","zIndex","href","rel","WindowDimensionsCtx","WindowDimensionsProvider","width","innerWidth","height","innerHeight","dimensions","setDimensions","handleResize","Home","isMobile","fontSize","lineHeight","encodeURI","NotFound","Loading","radius","margin","PinyinCharacter","character","pinyin","characterSize","pinyinSize","pinyinClass","characterClass","IDEOGRAPHIC_DESCRIPTIONS","Word","otherMode","params","useParams","wordParam","scrollTo","word","setWord","wordMode","setWordMode","wordData","setWordData","progress","setProgress","status","data","alt","src","wordType","singlePinyin","wordLength","mainSize","sectionHeaderStyle","onLoaderFinished","traditional","simplified","definition","sort","sentence","sentenceSplit","splitLen","sentenceJoin","text","Fragment","j","k","ordinalSuffixOf","toPrecision","contain_word","wordPinyin","displayWord","related_word","Results","searchParam","ScrollToTop","App","basename","DarkMode","render","exact","path","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cdf0d7c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/not_found.f7113d52.svg\";","import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst DarkModeCtx = createContext(null);\n\nconst DarkModeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n  const [componentMounted, setComponentMounted] = useState(false);\n  const setMode = (mode) => {\n    window.localStorage.setItem('theme', mode);\n    setTheme(mode);\n  };\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setMode('dark');\n    } else {\n      setMode('light');\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    window.matchMedia &&\n    window.matchMedia('(prefers-color-scheme: dark)').matches &&\n    !localTheme\n      ? setMode('dark')\n      : localTheme\n      ? setTheme(localTheme)\n      : setMode('light');\n    setComponentMounted(true);\n  }, []);\n  if (theme === 'dark') {\n    document.documentElement.classList.add('mode-dark');\n  } else {\n    document.documentElement.classList.remove('mode-dark');\n  }\n\n  // return [theme, toggleTheme, componentMounted];\n  return (\n    <DarkModeCtx.Provider value={[theme, toggleTheme, componentMounted]}>\n      {children}\n    </DarkModeCtx.Provider>\n  );\n};\n\nexport default DarkModeProvider;\nexport const useDarkMode = () => useContext(DarkModeCtx);\n","export const linkHover =\n  'transition-colors transition-transform duration-300 ease-in-out hover-red';\n\nexport const linkHoverScale =\n  'md:transform hover:scale-105 hover:shadow-lg hover:z-20 relative';\n\nexport const primaryColor = 'black';\nexport const secondaryColor = 'light-500';\n\nexport const darkPrimaryColor = 'light-800';\nexport const darkSecondaryColor = 'light-600';\n\nexport const textPrimaryColor = `text-${primaryColor} dark:text-${darkPrimaryColor}`;\nexport const textSecondaryColor = `text-${secondaryColor} dark:text-${darkSecondaryColor}`;\n\nexport const borderPrimaryColor = `border-black dark:border-gray-800`;\nexport const borderSecondaryColor = `border-gray-400 dark:border-gray-800`;\n\nexport const backgroundPrimaryColor = `bg-black dark:bg-gray-500`;\nexport const backgroundSecondaryColor = `bg-gray-500 dark:bg-gray-700`;\n","/**\n * @file Converts pinyin tone numbers to tone marks.\n * @author Kevin K. Yang <yangkevi@usc.edu>\n * @copyright Kevin K. Yang 2017. Licensed under the MIT License.\n */\n\n/**\n * An object holding arrays of Unicode tone marks for each vowel.\n * Each tone mark can be accessed very intuitively. For example,\n * to access the tone marked version of a2, you would call\n * toneMarks[\"a\"][2].\n *\n * @type {Object}\n */\nvar toneMarks = {\n  a: ['a', '\\u0101', '\\u00e1', '\\u01ce', '\\u00e0', 'a'],\n  e: ['e', '\\u0113', '\\u00e9', '\\u011b', '\\u00e8', 'e'],\n  i: ['i', '\\u012b', '\\u00ed', '\\u01d0', '\\u00ec', 'i'],\n  o: ['o', '\\u014d', '\\u00f3', '\\u01d2', '\\u00f2', 'o'],\n  u: ['u', '\\u016b', '\\u00fa', '\\u01d4', '\\u00f9', 'u'],\n  v: ['\\u00fc', '\\u01d6', '\\u01d8', '\\u01da', '\\u01dc', '\\u00fc'],\n};\n\n/**\n * @return {Boolean} whether this string is a single alphabetical letter.\n */\nconst isAlpha = (str) => {\n  return /^[A-Za-z]$/.test(str);\n};\n\n/**\n * Finds the last occurrence of a regular expression\n * pattern match in this String.\n *\n * @param  {RegExp} the pattern to match\n * @return {Number} the last match in this string\n */\nconst lastIndexOfRegex = (str, regExp) => {\n  var lastIndex = -1;\n  for (var i = 0; i < str.length; i++) {\n    if (regExp.test(str.charAt(i))) {\n      lastIndex = i;\n    }\n  }\n\n  return lastIndex;\n};\n\n/**\n * @param  {Number} index The index of the character to replace\n * @param  {String} replacement The string to insert at the index\n * @return {String} this String, with the specified replacement\n */\nconst replaceAt = (str, index, replacement) => {\n  if (index >= 0 && index < str.length && typeof replacement === 'string') {\n    return str.substring(0, index) + replacement + str.substring(index + 1);\n  } else {\n    return str;\n  }\n};\n\n/**\n * Converts this String, which must be a single pinyin word followed by a\n * tone number, to the equivalent pinyin word with tone marks.\n *\n * @return {String} this String, with the tone number removed\n *                       and tone mark inserted.\n */\nconst convertPinyin = (str) => {\n  // convert to lowercase\n  str = str.toLocaleLowerCase();\n  // get index of the tone number\n  var toneNumIndex = str.search(/[1-5]/);\n  // get index of the first pinyin vowel\n  var firstVowelIndex = str.search(/[aeiouv\\u00fc]/);\n  if (\n    str.length > 7 ||\n    toneNumIndex < 1 ||\n    toneNumIndex !== str.length - 1 ||\n    firstVowelIndex < 0\n  ) {\n    // this string is either too long to be pinyin, does not contain a \\\n    // correctly placed tone number, or has no pinyin vowels\n    console.log(\n      'String.prototype.convertPinyin:' + str + ' is not a valid pinyin word.'\n    );\n    return str;\n  }\n\n  var index;\n  /** @type {Number} from 1 to 5 */\n  var toneNum = parseInt(str[toneNumIndex]);\n  if (/[ae]/.test(str)) {\n    // str contains an 'a' or an 'e', both of which take precedence\n    index = str.search(/[ae]/);\n    str = replaceAt(str, index, toneMarks[str.charAt(index)][toneNum]);\n  } else if (/ou/.test(str)) {\n    // str contains 'ou'. The tone always goes on the 'o'\n    index = str.search(/ou/);\n    str = replaceAt(str, index, toneMarks[str.charAt(index)][toneNum]);\n  } else {\n    // place the tone on the last vowel\n    index = lastIndexOfRegex(str, /[aeiouv\\u00fc]/);\n    var vowel = str.charAt(index);\n    if (vowel === '\\u00fc') {\n      vowel = 'v';\n    }\n    str = replaceAt(str, index, toneMarks[vowel][toneNum]);\n  }\n  // strip the tone number\n  str = str.substring(0, str.length - 1);\n  return str;\n};\n\n/**\n * @param  {String} the string to convert\n * @return {String} the converted string\n */\nexport const pinyinify = (str) => {\n  const NOT_PINYIN = [','];\n\n  if (\n    typeof str !== 'string' ||\n    str === undefined ||\n    NOT_PINYIN.includes(str)\n  ) {\n    // non-breaking space, to fix spacing issues\n    return '\\xa0';\n  }\n\n  str = str.toLowerCase();\n  str = str.replace('u:', 'ü');\n\n  var res = '';\n  var i = 0;\n  // parse str character by character\n  while (str.length > 0) {\n    var char = str.charAt(i);\n    if (isAlpha(char)) {\n      // a letter has been found\n      if (i !== 0) {\n        // remove non-letters found up to now, add to res\n        res += str.substring(0, i);\n        str = str.substring(i);\n        i = 0;\n      }\n      // get index of next tone number, if it exists\n      var toneNumIndex = str.search(/[1-5]/);\n      // get index of next whitespace, if it exists\n      var whitespaceIndex = str.search(/\\s/);\n\n      if (\n        toneNumIndex > 0 &&\n        toneNumIndex < 7 &&\n        (whitespaceIndex < 0 || whitespaceIndex > toneNumIndex)\n      ) {\n        // there is a tone number within 6 characters from now, and no \\\n        // whitespaces between this character and the tone number\n        res += convertPinyin(str.substring(0, toneNumIndex + 1));\n        str = str.substring(toneNumIndex + 1);\n      } else if (whitespaceIndex < 0) {\n        // no valid tone numbers nor whitespace, add rest of string to res\n        res += str.substring(0);\n        str = '';\n      } else {\n        // whitespace found, remove everything up to and including the \\\n        // whitespace, and add to res\n        res += str.substring(0, whitespaceIndex + 1);\n        str = str.substring(whitespaceIndex + 1);\n      }\n    } else if (i >= str.length) {\n      // no more characters to parse\n      res += str.substring(0);\n      str = '';\n    } else {\n      // increment index\n      i++;\n    }\n  }\n\n  return res;\n};\n\nexport const numberWithCommas = (x) => {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n\nexport const removeDuplicates = (arr) => {\n  let unique = arr.reduce(function (a, b) {\n    if (a.indexOf(b) < 0) a.push(b);\n    return a;\n  }, []);\n  return unique;\n};\n\n/**\n * Length of a Unicode-encoded string\n * (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length#Unicode)\n * @param  {String} the string to convert\n * @return {String} the converted string\n */\nexport const getCharacterLength = (str) => {\n  // The string iterator that is used here iterates over characters,\n  //  not mere code units\n  return [...str].length;\n};\n\n/**\n * Split the first occurrences of a delimiter, leaving\n * the rest of the string unsplit\n * @param {String} string\n * @param {delim} delim delimiter\n * @param {int} limit max number of splits\n * @return {Array}\n */\nexport function splitFirst(string, delim, limit) {\n  const arr = string.split(delim);\n  const result = arr.splice(0, limit);\n\n  result.push(arr.join(delim));\n\n  return result;\n}\n\n/**\n * Get the ordinal suffix of a word (e.g. 1 -> \"st\", 2 -> \"nd\", etc.)\n * @param {int} i\n */\nexport const ordinalSuffixOf = (i) => {\n  var j = i % 10,\n    k = i % 100;\n  if (j === 1 && k !== 11) {\n    return 'st';\n  }\n  if (j === 2 && k !== 12) {\n    return 'nd';\n  }\n  if (j === 3 && k !== 13) {\n    return 'rd';\n  }\n  return 'th';\n};\n","import React, { useState, useRef, useEffect } from 'react';\n\n// location management\nimport { useHistory, useLocation, Link } from 'react-router-dom';\nimport queryString from 'query-string';\n\n// themes and components\nimport { useDarkMode } from '../components/DarkMode';\nimport {\n  linkHover,\n  textPrimaryColor,\n  linkHoverScale,\n  borderPrimaryColor,\n} from '../themes';\n\n// loading animation\nimport BarLoader from 'react-spinners/BarLoader';\nimport { css } from '@emotion/core';\n\n// other utilities\nimport { pinyinify, numberWithCommas } from '../utilities';\nvar _ = require('lodash');\n\nconst Navbar = () => {\n  // dark mode functions\n  const [theme, toggleTheme, componentMounted] = useDarkMode();\n\n  // enable location and history\n  let history = useHistory();\n  let location = useLocation();\n\n  var [searchWord, setSearchWord] = useState(''); // current text in search box\n  let [results, setResults] = useState([]); // preview search results\n  let [searchFocused, setSearchFocused] = useState(false); // if search box is focused\n  let [loading, setLoading] = useState(false); // if search preview is loading\n\n  // parse search parameters and get mode\n  let queryParams = queryString.parse(location.search);\n  let modeParam = queryParams['mode'];\n\n  const updateSearch = (event) => {\n    event.persist();\n    setSearchFocused(true);\n    setSearchWord(event.target.value);\n\n    executeSearch(event.target.value);\n  };\n\n  // search while typing handler\n  const executeSearch = useRef(\n    _.debounce((query) => {\n      // if query is just whitespace\n      if (!query.replace(/\\s/g, '').length) {\n        setResults([]);\n        return;\n      }\n      setLoading(true);\n      fetch(\n        `https://hotpot-search.kevinhu.io/.netlify/functions/search?query=${query}&limit=4`\n      )\n        .then((response) => {\n          return response.json();\n        })\n        .then((body) => {\n          setResults(body);\n          setLoading(false);\n        });\n    }, 160)\n  ).current;\n\n  // handle search submit event\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setSearchFocused(false);\n    history.push(`/results?search=${searchWord}&mode=${modeParam}`);\n  };\n\n  // handlers for detecting clicks outside of search input and suggestions\n  // see https://medium.com/@pitipatdop/little-neat-trick-to-capture-click-outside-with-react-hook-ba77c37c7e82\n  const searchContainer = useRef();\n\n  const checkSearchFocus = (e) => {\n    if (searchContainer.current.contains(e.target)) {\n      // inside click\n      return;\n    }\n    // outside click\n    setSearchFocused(false);\n  };\n\n  // initial calls\n  useEffect(() => {\n    // add when mounted\n    document.addEventListener('mousedown', checkSearchFocus);\n    // return function to be called when unmounted\n    return () => {\n      document.removeEventListener('mousedown', checkSearchFocus);\n    };\n  }, []);\n\n  const toggleMode = () => {\n    queryParams['mode'] =\n      queryParams['mode'] === 'simplified' ? 'traditional' : 'simplified';\n\n    let location_split = location.pathname.split('/');\n    location_split = location_split.filter((x) => x !== '');\n\n    if (location_split[0] === 'word') {\n      const temp = queryParams['alt'];\n      queryParams['alt'] = location_split[1];\n      location_split[1] = temp;\n\n      history.push(\n        `/${location_split.join('/')}/?${queryString.stringify(queryParams)}`\n      );\n    }\n\n    if (location_split[0] === 'results') {\n      history.push(\n        `/${location_split.join('/')}/?${queryString.stringify(queryParams)}`\n      );\n    }\n  };\n\n  return (\n    <div\n      className={`shadow-lg w-full md:w-3/4 flex mx-auto bg-white dark:bg-dark-800 leading-8 border-2 ${borderPrimaryColor} ${\n        modeParam === 'simplified' ? 'chinese-serif-sc' : 'chinese-serif-tc'\n      }`}\n      style={{\n        marginTop: '-2px',\n      }}\n    >\n      {/* Logo and link to home */}\n      <div className=\"h-12\">\n        <Link\n          to={`/?mode=${modeParam}`}\n          className={`hidden md:block inline align-middle font-semibold english-serif px-6 py-2 red text-2xl`}\n        >\n          hotpot\n        </Link>\n      </div>\n      {/* Simplified-traditional toggle */}\n      <div\n        onClick={toggleMode}\n        className={`font-semibold table text-xl h-12 px-2 cursor-pointer select-none md:border-l-2 border-black dark:border-gray-800`}\n      >\n        <div\n          className={`align-middle table-cell whitespace-no-wrap ${textPrimaryColor}`}\n        >\n          {modeParam === 'simplified' ? '简体' : '繁体'}\n        </div>\n      </div>\n      {/* Search form */}\n      <div\n        className={`border-l-2 border-r-2 w-full h-12 ${borderPrimaryColor}`}\n      >\n        <form\n          onSubmit={handleSubmit}\n          className={`bg-transparent outline-none w-full h-12`}\n        >\n          <div className=\"w-full h-full relative\" ref={searchContainer}>\n            {/* Search input box */}\n            <input\n              className={`px-4 py-2 bg-transparent outline-none w-full h-full`}\n              type=\"text\"\n              placeholder={`Search ${numberWithCommas(118639)} words`}\n              value={searchWord}\n              onChange={updateSearch}\n              onFocus={() => setSearchFocused(true)}\n              onClick={() => {}}\n            ></input>\n            {/* Search preview loading animation */}\n            <BarLoader\n              css={css`\n                width: 100%;\n                height: 2px;\n                display: block;\n                margin-bottom: -2px;\n                z-index: 10;\n                background-color: ${theme === 'dark' ? 'white' : 'black'};\n              `}\n              size={'100%'}\n              color={theme === 'dark' ? '#c10000' : '#e84a5f'}\n              loading={loading}\n            />\n            {/* Render search results */}\n            {results.length > 0 && searchWord !== '' && searchFocused && (\n              <div\n                className={`shadow-lg z-10 absolute text-left bg-white dark:bg-dark-800 box-content border-l-2 border-r-2 border-b-2 w-full ${borderPrimaryColor}`}\n                style={{ marginLeft: '-2px', marginTop: '2px' }}\n              >\n                {results.map((result, index) => {\n                  return (\n                    <Link\n                      to={`/word/${result[modeParam]}?mode=${modeParam}`}\n                      onClick={() => setSearchFocused(false)}\n                      className={`${linkHover} ${linkHoverScale} py-2 block bg-white dark:bg-dark-500 dark-hover:bg-dark-800`}\n                      key={index}\n                    >\n                      <div className={`pt-1 px-3`}>\n                        <div className=\"font-semibold leading-4\">\n                          {/* Result character */}\n                          <div className=\"text-xl inline\">\n                            {result[modeParam]}\n                          </div>\n                          {/* Pinyin */}\n                          <div className=\"pl-2 inline english-serif\">\n                            {pinyinify(result['pinyin'])}\n                          </div>\n                        </div>\n                        {/* Definition */}\n                        <div className=\"text-light-500 dark:text-light-700 english-serif leading-4\">\n                          {result['definition']}\n                        </div>\n                      </div>\n                    </Link>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </form>\n      </div>\n      {/* Dark mode toggle */}\n      <div\n        onClick={toggleTheme}\n        checked={theme === 'dark'}\n        className={`font-semibold text-xl h-12 p-2 cursor-pointer select-none ${textPrimaryColor}`}\n      >\n        {theme === 'dark' ? '暗' : '光'}\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\n\nimport { linkHover } from '../themes';\n\nconst Footer = ({ className }) => {\n  return (\n    <div\n      className={`pb-8 text-center w-full bottom-0 text-gray-800 dark:text-gray-200 ${className}`}\n      style={{ zIndex: -1 }}\n    >\n      Made by{' '}\n      <a\n        className={`underline ${linkHover}`}\n        href=\"https://kevinhu.io\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Kevin Hu\n      </a>{' '}\n      and{' '}\n      <a\n        className={`underline ${linkHover}`}\n        href=\"https://taehyoungjo.github.io/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Tae Hyoung Jo\n      </a>\n      <br />\n      <a\n        className={`underline ${linkHover}`}\n        href=\"https://github.com/kevinhu/hotpot\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Source\n      </a>{' '}\n      on GitHub\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst WindowDimensionsCtx = createContext(null);\n\nconst WindowDimensionsProvider = ({ children }) => {\n  const [dimensions, setDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return (\n    <WindowDimensionsCtx.Provider value={dimensions}>\n      {children}\n    </WindowDimensionsCtx.Provider>\n  );\n};\n\nexport default WindowDimensionsProvider;\nexport const useWindowDimensions = () => useContext(WindowDimensionsCtx);\n","import React, { useState, useEffect, useRef } from 'react';\n\n// location management\nimport { useHistory, useLocation, Link } from 'react-router-dom';\nimport queryString from 'query-string';\n\n// themes and components\nimport { linkHover, linkHoverScale } from '../themes';\nimport { useDarkMode } from '../components/DarkMode';\nimport Footer from '../components/Footer';\nimport { useWindowDimensions } from '../components/WindowDimensionsProvider';\n\n// loading animation\nimport BarLoader from 'react-spinners/BarLoader';\nimport { css } from '@emotion/core';\n\n// other utilities\nimport { pinyinify, numberWithCommas } from '../utilities';\nimport _ from 'lodash';\n\nconst Home = () => {\n  // dark mode functions\n  const [theme, toggleTheme, componentMounted] = useDarkMode();\n\n  // enable location and history\n  let history = useHistory();\n  let location = useLocation();\n\n  // get screen dimensions\n  const { width } = useWindowDimensions();\n  const isMobile = width < 768;\n\n  let [searchWord, setSearchWord] = useState(''); // current text in search box\n  let [results, setResults] = useState([]); // preview search results\n  let [searchFocused, setSearchFocused] = useState(false); // if search box is focused\n  let [loading, setLoading] = useState(false); // if search preview is loading\n\n  // parse search parameters and get mode\n  let queryParams = queryString.parse(location.search);\n  let modeParam = queryParams['mode'];\n\n  // resolve other modes\n  if (modeParam !== 'simplified' && modeParam !== 'traditional') {\n    modeParam = 'simplified';\n    history.replace(`/?mode=${modeParam}`);\n  }\n\n  // search while typing handler\n  const updateSearch = (event) => {\n    event.persist();\n    setSearchWord(event.target.value);\n\n    executeSearch(event.target.value);\n  };\n\n  // execute search handler (debounced)\n  const executeSearch = useRef(\n    _.debounce((query) => {\n      // if query is just whitespace\n      if (!query.replace(/\\s/g, '').length) {\n        setResults([]);\n        return;\n      }\n      setLoading(true);\n      fetch(\n        `https://hotpot-search.kevinhu.io/.netlify/functions/search?query=${query}&mode=${modeParam}&limit=8`\n      )\n        .then((response) => {\n          return response.json();\n        })\n        .then((body) => {\n          setResults(body);\n          setLoading(false);\n        });\n    }, 160)\n  ).current;\n\n  // handle search submit event\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    history.push(`/results?search=${encodeURI(searchWord)}&mode=${modeParam}`);\n  };\n\n  // handlers for detecting clicks outside of search input and suggestions\n  // see https://medium.com/@pitipatdop/little-neat-trick-to-capture-click-outside-with-react-hook-ba77c37c7e82\n  const searchContainer = useRef();\n\n  const checkSearchFocus = (e) => {\n    if (searchContainer.current.contains(e.target)) {\n      // inside click\n      return;\n    }\n    // outside click\n    setSearchFocused(false);\n  };\n\n  // initial calls\n  useEffect(() => {\n    // ping the search endpoint to warm it up\n    fetch(`https://hotpot-search.kevinhu.io/.netlify/functions/search`);\n    // add when mounted\n    document.addEventListener('mousedown', checkSearchFocus);\n    // return function to be called when unmounted\n    return () => {\n      document.removeEventListener('mousedown', checkSearchFocus);\n    };\n  }, []);\n\n  // switch between simplified-traditional\n  const toggleMode = () => {\n    queryParams['mode'] =\n      queryParams['mode'] === 'simplified' ? 'traditional' : 'simplified';\n\n    history.push(`/?mode=${queryParams['mode']}`);\n  };\n\n  return (\n    <div\n      className={\n        modeParam === 'simplified' ? 'chinese-serif-sc' : 'chinese-serif-tc'\n      }\n    >\n      {/* Dark mode toggle */}\n      <div\n        onClick={toggleTheme}\n        checked={theme === 'dark'}\n        className=\"font-semibold shadow-xl pt-1 pb-2 text-2xl px-3 level-6 mx-auto cursor-pointer select-none border-2 border-black bg-white dark:border-gray-700 dark:bg-dark-700\"\n        style={{ width: 'max-content', marginTop: '-2px' }}\n      >\n        {theme === 'dark' ? '暗' : '光'}\n      </div>\n      {/* Search box container */}\n      <div\n        className={`w-full md:w-3/5 lg:w-1/2 xl:w-2/5 left-0 right-0 absolute mx-auto text-center py-16 shadow-xl bg-white dark:bg-dark-900`}\n        style={{ marginTop: '20vh' }}\n      >\n        {/* Logo */}\n        <div\n          className=\"red font-semibold pb-8 english-serif\"\n          style={{ fontSize: '4rem', lineHeight: '4rem' }}\n        >\n          hotpot\n        </div>\n        {/* Search form container */}\n        <div>\n          {/* Search form */}\n          <form\n            onSubmit={handleSubmit}\n            className={`outline-none w-full ${\n              searchFocused && isMobile\n                ? 'fixed block mt-0 top-0 px-0 left-0'\n                : 'px-4 md:px-16 '\n            }`}\n          >\n            <div className=\"w-full relative\" ref={searchContainer}>\n              <div className=\"shadow-lg flex level-3\">\n                {/* Simplified-traditional toggle */}\n                <div\n                  onClick={toggleMode}\n                  className={`font-semibold select-none cursor-pointer border-2 text-xl p-2 leading-6 flex-none border-black dark:border-gray-200 bg-black text-white dark:bg-gray-200 dark:text-black`}\n                >\n                  {modeParam === 'simplified' ? '简体' : '繁体'}\n                </div>\n                {/* Search input box */}\n                <input\n                  className={`text-lg py-2 px-3 outline-none w-full dark:bg-dark-900 border-2 border-black dark:border-gray-200 overflow-x-hidden`}\n                  type=\"text\"\n                  placeholder={`Search ${numberWithCommas(118639)} words`}\n                  value={searchWord}\n                  onChange={updateSearch}\n                  onFocus={() => setSearchFocused(true)}\n                  onClick={() => {}}\n                ></input>\n              </div>\n              {/* Search preview loading animation */}\n              <BarLoader\n                css={css`\n                  width: 100%;\n                  height: 2px;\n                  display: block;\n                  margin-top: -2px;\n                  background-color: ${theme === 'dark' ? 'white' : 'black'};\n                `}\n                size={'100%'}\n                color={theme === 'dark' ? '#c10000' : '#e84a5f'}\n                loading={loading}\n              />\n              {/* Render search results */}\n              {results.length > 0 && searchWord !== '' && searchFocused && (\n                <div\n                  className={`shadow-lg z-10 absolute text-left border-l-2 border-r-2 border-b-2 w-full border-black dark:border-gray-200`}\n                >\n                  {results.map((result, index) => {\n                    return (\n                      <Link\n                        to={`/word/${encodeURI(\n                          result[modeParam]\n                        )}?mode=${modeParam}`}\n                        className={`${linkHover} ${linkHoverScale} py-2 block bg-white dark:bg-dark-500 dark-hover:bg-dark-800`}\n                        key={index}\n                      >\n                        <div className={`pt-1 px-3`}>\n                          <div className=\"font-semibold leading-4\">\n                            {/* Result character */}\n                            <div className=\"text-xl inline\">\n                              {result[modeParam]}\n                            </div>\n                            {/* Pinyin */}\n                            <div className=\"pl-2 inline\">\n                              {pinyinify(result['pinyin'])}\n                            </div>\n                          </div>\n                          {/* Definition */}\n                          <div className=\"text-light-500 dark:text-light-700  font-normal leading-4\">\n                            {result['definition']}\n                          </div>\n                        </div>\n                      </Link>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n            {/* Overlay background on mobile */}\n            <div\n              className={`h-screen w-full bg-white dark:bg-black ${\n                searchFocused && isMobile ? 'block' : 'hidden'\n              }`}\n            ></div>\n          </form>\n        </div>\n      </div>\n      <Footer className=\"absolute\" />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nfunction NotFound() {\n  return <div>404!</div>;\n}\n\nexport default NotFound;\n","import React from 'react';\n\nimport ScaleLoader from 'react-spinners/ScaleLoader';\n\nfunction Loading() {\n  return (\n    <div className=\"w-full text-center h-screen fixed flex items-center justify-center\">\n      <div>\n        <ScaleLoader height={32} width={4} radius={0} margin={2} />\n      </div>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\n\nconst PinyinCharacter = ({\n  character,\n  pinyin,\n  characterSize,\n  pinyinSize,\n  className,\n  pinyinClass,\n  characterClass,\n}) => {\n  return (\n    <div className={className} style={{ width: 'max-content' }}>\n      <div\n        className={`font-semibold english-serif select-none text-center ${\n          pinyinClass ? pinyinClass : ''\n        }`}\n        style={{ fontSize: pinyinSize }}\n      >\n        {pinyin}\n      </div>\n      <div\n        className={`${characterClass ? characterClass : ''}`}\n        style={{ fontSize: characterSize, lineHeight: characterSize }}\n      >\n        {character}\n      </div>\n    </div>\n  );\n};\n\nexport default PinyinCharacter;\n","import React, { useEffect, useState } from 'react';\n\n// location management\nimport { useHistory, useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\n\n// themes and components\nimport { Link, useParams } from 'react-router-dom';\nimport LoadingBar from 'react-top-loading-bar';\nimport Loading from '../components/Loading';\nimport Footer from '../components/Footer';\nimport PinyinCharacter from '../components/PinyinCharacter.js';\nimport NotFound from '../assets/not_found.svg';\nimport {\n  linkHover,\n  linkHoverScale,\n  textPrimaryColor,\n  textSecondaryColor,\n  borderPrimaryColor,\n  borderSecondaryColor,\n} from '../themes';\n\n// other utilities\nimport {\n  pinyinify,\n  removeDuplicates,\n  getCharacterLength,\n  ordinalSuffixOf,\n} from '../utilities';\n\nconst IDEOGRAPHIC_DESCRIPTIONS = [\n  '⿰',\n  '⿱',\n  '⿲',\n  '⿳',\n  '⿴',\n  '⿵',\n  '⿶',\n  '⿷',\n  '⿸',\n  '⿹',\n  '⿺',\n  '⿻',\n];\n\nconst MAX_OTHER_DESCRIPTION_LENGTH = 64;\n\nconst Word = () => {\n  // enable location and history\n  let history = useHistory();\n  let location = useLocation();\n  let params = useParams();\n\n  // parse search parameters and get mode and query\n  let queryParams = queryString.parse(location.search);\n  let modeParam = queryParams['mode'];\n  let wordParam = params['word'];\n\n  // resolve other modes\n  if (modeParam !== 'simplified' && modeParam !== 'traditional') {\n    modeParam = 'simplified';\n    history.replace(`/word/${encodeURI(wordParam)}/?mode=${modeParam}`);\n  }\n\n  // keep track of other mode\n  let otherMode;\n\n  if (modeParam === 'simplified') {\n    otherMode = 'traditional';\n  } else {\n    otherMode = 'simplified';\n  }\n\n  const { pathname } = location;\n\n  // reset scroll when location changes\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  // keep track\n  const [word, setWord] = useState(); // current word to display\n  const [wordMode, setWordMode] = useState(); // current mode\n  const [wordData, setWordData] = useState(); // word data object\n  const [loading, setLoading] = useState(false); // whether or not page is loading\n  const [progress, setProgress] = useState(0); // top progress bar percentage\n\n  // initial calls\n  useEffect(() => {\n    if (wordParam && modeParam && !loading) {\n      // if word or mode changes, and we are not currently loading\n      if (wordParam !== word || modeParam !== wordMode) {\n        setLoading(true);\n        setProgress(0);\n\n        // get word data\n        fetch(\n          `https://raw.githubusercontent.com/kevinhu/dictionary-files/master/${modeParam}/${wordParam}.json`\n        )\n          .then((response) => {\n            setProgress(50);\n            if (response.status === 404) {\n              setProgress(100);\n              setWord(wordParam);\n              setWordMode(modeParam);\n              setWordData(undefined);\n              setLoading(false);\n              return;\n            }\n            return response.json();\n          })\n          .then((data) => {\n            setProgress(100);\n            setWord(wordParam);\n            setWordMode(modeParam);\n            setWordData(data);\n\n            if (modeParam === 'simplified') {\n              const alt = data['traditional'][0];\n              history.replace(\n                `/word/${encodeURI(\n                  wordParam\n                )}/?mode=${modeParam}&alt=${encodeURI(alt)}`\n              );\n            } else if (modeParam === 'traditional') {\n              const alt = data['simplified'][0];\n              history.replace(\n                `/word/${encodeURI(\n                  wordParam\n                )}/?mode=${modeParam}&alt=${encodeURI(alt)}`\n              );\n            }\n            setLoading(false);\n          });\n      }\n    }\n  }, [wordParam, modeParam, loading, word, wordMode, history]);\n\n  // if no word data\n  if (!wordData) {\n    // if not loading, assume word not found\n    if (!loading) {\n      return (\n        <div className=\"text-center w-full h-full p-12\">\n          <img\n            alt=\"Word not found.\"\n            className=\"py-12 w-1/2 md:w-1/3 m-auto select-none\"\n            src={NotFound}\n          ></img>\n          <div className=\"text-lg select-none mb-6\">Word not found.</div>\n        </div>\n      );\n    }\n    // otherwise, render the loading spinner\n    else {\n      return <Loading />;\n    }\n  }\n\n  // get type of word\n  const wordType = wordData['traditional'] ? 'simplified' : 'traditional';\n\n  // whether word has a single pinyin\n  const singlePinyin =\n    removeDuplicates(wordData['pinyin'].map((x) => x.toLowerCase())).length ===\n    1;\n\n  const wordLength = getCharacterLength(wordData['word']);\n\n  // size of title characters\n  let mainSize = 0;\n\n  // adjust size of title characters by length\n  if (wordLength < 3) {\n    mainSize = 6;\n  } else if (wordLength < 6) {\n    mainSize = 4;\n  } else if (wordLength < 9) {\n    mainSize = 3;\n  } else {\n    mainSize = 2;\n  }\n\n  // subsection header style\n  const sectionHeaderStyle = `english-serif text-xl font-semibold ${textPrimaryColor}`;\n\n  return (\n    <div\n      className={`w-full ${\n        modeParam === 'simplified' ? 'chinese-serif-sc' : 'chinese-serif-tc'\n      }`}\n    >\n      {/* Top loading stripe */}\n      <LoadingBar\n        color=\"#f11946\"\n        progress={progress}\n        onLoaderFinished={() => setProgress(0)}\n      />\n      {/* Word info container */}\n      <div className=\"w-full text-center pt-16\">\n        {/* Word text */}\n        <div className=\"w-3/4 mx-auto flex justify-center flex-wrap pb-8\">\n          {getCharacterLength(wordData['word']) === 1 ? (\n            <PinyinCharacter\n              character={wordData['word']}\n              pinyin={singlePinyin ? pinyinify(wordData['pinyin'][0]) : ''}\n              characterSize={`${mainSize}rem`}\n              pinyinSize={`${mainSize / 3}rem`}\n              className=\"px-1\"\n            />\n          ) : (\n            wordData['characters'] &&\n            wordData['characters'].map((character, index) => {\n              return (\n                <PinyinCharacter\n                  character={character['word']}\n                  pinyin={\n                    singlePinyin\n                      ? pinyinify(wordData['pinyin'][0].split(' ')[index])\n                      : ''\n                  }\n                  characterSize={`${mainSize}rem`}\n                  pinyinSize={`${mainSize / 3}rem`}\n                  className=\"px-1\"\n                  key={index}\n                />\n              );\n            })\n          )}\n        </div>\n\n        {/* Other mode characters */}\n        <div className=\"mx-auto pb-2\" style={{ width: 'max-content' }}>\n          <div\n            className={`border-b-2 ${borderSecondaryColor} ${textSecondaryColor}`}\n          >\n            {wordType === 'simplified' ? 'Traditional' : 'Simplified'}\n          </div>\n          {wordType === 'simplified' &&\n            removeDuplicates(wordData['traditional']).map(\n              (traditional, index) => (\n                <Link\n                  to={`/word/${encodeURI(traditional)}/?mode=${otherMode}`}\n                  className={`${textPrimaryColor} ${linkHover} \n\t\t\t\t\t\t\t\t\t\t\t}`}\n                  key={index}\n                >\n                  <div\n                    className=\"inline px-2 text-2xl chinese-serif-tc\"\n                    key={index}\n                  >\n                    {traditional}\n                  </div>\n                </Link>\n              )\n            )}\n          {wordType === 'traditional' &&\n            removeDuplicates(wordData['simplified']).map(\n              (simplified, index) => (\n                <Link\n                  to={`/word/${encodeURI(simplified)}/?mode=${otherMode}`}\n                  className={`${textPrimaryColor} ${linkHover} \n\t\t\t\t\t\t\t\t\t\t\t}`}\n                  key={index}\n                >\n                  <div\n                    className=\"inline px-2 text-2xl chinese-serif-sc\"\n                    key={index}\n                  >\n                    {simplified}\n                  </div>\n                </Link>\n              )\n            )}\n        </div>\n      </div>\n\n      {/* Container for word definitions, usage, etc. */}\n      <div\n        className={`shadow-xl w-full md:w-3/4 flex flex-wrap mx-auto mb-12 bg-white border-2 dark:bg-dark-800 ${borderPrimaryColor}`}\n      >\n        {/* Word definitions, characters, and example sentences */}\n        <div className={`w-full md:w-2/3 border-r-2 ${borderSecondaryColor}`}>\n          {/* Word definitions */}\n          <div className={`p-6 border-b-2 ${borderSecondaryColor}`}>\n            <div className={sectionHeaderStyle}>\n              {wordData['definition'].length > 1 ? 'Definitions' : 'Definition'}\n            </div>\n            {wordData['definition'].map((definition, index) => (\n              <div className=\"py-1 leading-5\" key={index}>\n                <div className=\"inline font-bold\">{index + 1}. </div>\n                <div className={`inline font-semibold ${textPrimaryColor}`}>\n                  ({pinyinify(wordData['pinyin'][index])}){' '}\n                </div>\n                <div className={`inline ${textSecondaryColor}`}>\n                  {definition.replace(/\\//g, '; ')}\n                </div>\n              </div>\n            ))}\n          </div>\n          {/* Word characters/components */}\n          <div\n            className={`p-6 pr-2 border-b-2 ${borderSecondaryColor} ${textPrimaryColor}`}\n          >\n            <div className={sectionHeaderStyle}>\n              {getCharacterLength(wordData['word']) > 1\n                ? 'Characters'\n                : 'Components'}\n            </div>\n            {getCharacterLength(wordData['word']) > 1\n              ? wordData['characters'].map((character, index) => {\n                  return (\n                    <Link\n                      to={`/word/${encodeURI(\n                        character['word']\n                      )}/?mode=${modeParam}`}\n                      className={`block bg-white dark:bg-dark-800 -ml-4 p-4 dark-hover:bg-dark-800 ${linkHover} ${linkHoverScale} ${\n                        !character['definition'] && 'disabled-link'\n                      }`}\n                      key={index}\n                    >\n                      <div className={`flex items-center`}>\n                        <div className=\"text-4xl pr-4 leading-8\">\n                          {character['word']}\n                        </div>\n\n                        <div>\n                          <div className=\"text-xl font-semibold\">\n                            {character['pinyin'] &&\n                              pinyinify(\n                                removeDuplicates(\n                                  character['pinyin'].map((x) =>\n                                    x.toLowerCase()\n                                  )\n                                )\n                                  .sort()\n                                  .join(' / ')\n                              )}\n                          </div>\n                          <div\n                            className={`${textSecondaryColor} leading-5 break-all`}\n                          >\n                            {character['definition'] &&\n                              character['definition'].join(' | ')}\n                          </div>\n                        </div>\n                      </div>\n                    </Link>\n                  );\n                })\n              : 'decomposition_definitions' in wordData['components'] &&\n                wordData['components']['decomposition_definitions'].map(\n                  (character, index) => {\n                    if (!IDEOGRAPHIC_DESCRIPTIONS.includes(character['word'])) {\n                      return (\n                        <Link\n                          to={`/word/${encodeURI(\n                            character['word']\n                          )}/?mode=${modeParam}`}\n                          className={`block bg-white dark:bg-dark-800 dark-hover:bg-dark-800 -ml-4 p-4 ${linkHover} ${linkHoverScale} ${\n                            !character['definition'] && 'disabled-link'\n                          }`}\n                          key={index}\n                        >\n                          <div className={`flex items-center`}>\n                            <div className=\"text-4xl pr-4 leading-8\">\n                              {character['word']}\n                            </div>\n\n                            <div>\n                              <div className=\"text-xl font-semibold\">\n                                {character['pinyin'] &&\n                                  pinyinify(\n                                    removeDuplicates(\n                                      character['pinyin'].map((x) =>\n                                        x.toLowerCase()\n                                      )\n                                    )\n                                      .sort()\n                                      .join(' / ')\n                                  )}\n                              </div>\n                              <div\n                                className={`${textSecondaryColor} leading-5 break-all`}\n                              >\n                                {character['definition'] &&\n                                  character['definition'].join(' | ')}\n                              </div>\n                            </div>\n                          </div>\n                        </Link>\n                      );\n                    } else {\n                      return '';\n                    }\n                  }\n                )}\n          </div>\n          {/* Word example sentences */}\n          <div className={`p-6 ${textPrimaryColor}`}>\n            <div className={sectionHeaderStyle} key={-1}>\n              Example sentences\n            </div>\n            {wordData['sentences'].length === 0 &&\n              'No example sentences found.'}\n            {wordData['sentences'].map((sentence, index) => {\n              let sentenceSplit = sentence['chinese'].split(wordData['word']);\n              let splitLen = sentenceSplit.length;\n\n              let sentenceJoin = sentenceSplit.map((text, index) => {\n                if (index < splitLen - 1) {\n                  return (\n                    <React.Fragment key={index}>\n                      {text}\n                      <div className=\"red inline\">{wordData['word']}</div>\n                    </React.Fragment>\n                  );\n                } else {\n                  return text;\n                }\n              });\n\n              return (\n                <div className=\"py-3\" key={index}>\n                  <div className=\"text-xl\">{sentenceJoin}</div>\n                  <div className={textSecondaryColor}>\n                    {sentence['english']}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        {/* Word statistics, containing words, and related words */}\n        <div\n          className={`w-full md:w-1/3 border-t-2 md:border-none ${borderSecondaryColor}`}\n        >\n          {/* Word statistics */}\n          <div className={`p-6 border-b-2 ${borderSecondaryColor}`}>\n            <div className={sectionHeaderStyle}>Statistics</div>\n\n            {wordData['rank'] !== -1 ? (\n              <div>\n                <div className={`font-bold inline ${textPrimaryColor}`}>\n                  {wordData['rank']}\n                  <sup>{ordinalSuffixOf(wordData['rank'])}</sup>\n                </div>{' '}\n                <div className={`inline ${textSecondaryColor}`}>\n                  most frequent word\n                </div>\n              </div>\n            ) : (\n              <div className={textSecondaryColor}>Word rank unavailable.</div>\n            )}\n\n            {wordData['fraction'] !== -1 ? (\n              <div>\n                <div className={`font-bold inline ${textPrimaryColor}`}>\n                  {(wordData['fraction'] * 100).toPrecision(2)}%\n                </div>{' '}\n                <div className={`inline ${textSecondaryColor}`}>\n                  of all words\n                </div>\n              </div>\n            ) : (\n              <div className={textSecondaryColor}>\n                Word fraction unavailable.\n              </div>\n            )}\n          </div>\n          {/* Containing words */}\n          <div\n            className={`p-6 pr-2 border-b-2 ${borderSecondaryColor} ${textPrimaryColor}`}\n          >\n            <div className={sectionHeaderStyle}>Containing words</div>\n            {wordData['containing_words'].length === 0 &&\n              'No containing words found.'}\n            {wordData['containing_words'].map((contain_word, index) => {\n              let wordPinyin = contain_word['pinyin'][0].split(' ');\n\n              let displayWord = contain_word['word']\n                .split('')\n                .map((character, index) => {\n                  return (\n                    <PinyinCharacter\n                      character={character}\n                      pinyin={pinyinify(wordPinyin[index])}\n                      characterSize=\"1.5rem\"\n                      pinyinSize=\"0.75rem\"\n                      key={index}\n                    />\n                  );\n                });\n\n              return (\n                <div className=\"pt-1\" key={index}>\n                  <Link\n                    to={`/word/${encodeURI(\n                      contain_word['word']\n                    )}/?mode=${modeParam}`}\n                    className={`${linkHover} ${linkHoverScale} block bg-white dark:bg-dark-800 dark-hover:bg-dark-800 -ml-4 p-4 -mb-4`}\n                  >\n                    <div className={`flex flex-wrap text-xl`}>\n                      {displayWord}\n                    </div>\n\n                    <div\n                      className={`${textSecondaryColor} break-all leading-5`}\n                    >\n                      {contain_word['definition'][0].length >\n                      MAX_OTHER_DESCRIPTION_LENGTH\n                        ? contain_word['definition'][0].substring(\n                            0,\n                            MAX_OTHER_DESCRIPTION_LENGTH\n                          ) + '...'\n                        : contain_word['definition'][0]}\n                    </div>\n                  </Link>\n                </div>\n              );\n            })}\n          </div>\n          {/* Related words */}\n          <div className=\"p-6 pr-2\">\n            <div className={`${sectionHeaderStyle} ${textPrimaryColor}`}>\n              See also\n            </div>\n            {wordData['related'].length === 0 && 'No related words found.'}\n            {wordData['related'].map((related_word, index) => {\n              let wordPinyin = related_word['pinyin'][0].split(' ');\n\n              let displayWord = related_word['word']\n                .split('')\n                .map((character, index) => {\n                  return (\n                    <PinyinCharacter\n                      character={character}\n                      pinyin={pinyinify(wordPinyin[index])}\n                      characterSize=\"1.5rem\"\n                      pinyinSize=\"0.75rem\"\n                      key={index}\n                    />\n                  );\n                });\n\n              return (\n                <div className={`pt-1 ${textPrimaryColor}`} key={index}>\n                  <Link\n                    to={`/word/${encodeURI(\n                      related_word['word']\n                    )}/?mode=${modeParam}`}\n                    className={`${linkHover} ${linkHoverScale} block bg-white dark:bg-dark-800 dark-hover:bg-dark-800 -ml-4 p-4 -mb-4`}\n                  >\n                    <div className={`flex flex-wrap text-xl`}>\n                      {displayWord}\n                    </div>\n\n                    <div\n                      className={`${textSecondaryColor}  break-all leading-5`}\n                    >\n                      {related_word['definition'][0].length >\n                      MAX_OTHER_DESCRIPTION_LENGTH\n                        ? related_word['definition'][0].substring(\n                            0,\n                            MAX_OTHER_DESCRIPTION_LENGTH\n                          ) + '...'\n                        : related_word['definition'][0]}\n                    </div>\n                  </Link>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Word;\n","import React, { useState, useEffect } from 'react';\n\n// location management\nimport { useHistory, useLocation, Link } from 'react-router-dom';\nimport queryString from 'query-string';\n\n// themes and components\nimport Footer from '../components/Footer';\nimport { linkHover, linkHoverScale } from '../themes';\nimport Loading from '../components/Loading';\nimport NotFound from '../assets/not_found.svg';\n\n// other utilities\nimport { pinyinify } from '../utilities';\n\nconst Results = () => {\n  // enable location and history\n  let history = useHistory();\n  let location = useLocation();\n\n  let [loading, setLoading] = useState(false); // whether results are loading\n  let [results, setResults] = useState(null); // store search results\n  let [searchWord, setSearchWord] = useState(''); // search query\n\n  // parse search parameters and get mode and query\n  let queryParams = queryString.parse(location.search);\n  let modeParam = queryParams['mode'];\n  let searchParam = queryParams['search'];\n\n  // update the query state if different\n  if (searchParam !== searchWord) {\n    setSearchWord(searchParam);\n  }\n\n  // resolve other modes\n  if (modeParam !== 'simplified' && modeParam !== 'traditional') {\n    modeParam = 'simplified';\n    history.push(`/?mode=${modeParam}`);\n  }\n\n  // initial calls\n  useEffect(() => {\n    setLoading(true);\n    // ping the search endpoint to warm it up\n    fetch(\n      `https://hotpot-search.kevinhu.io/.netlify/functions/search?query=${encodeURI(\n        searchWord\n      )}&mode=${modeParam}&limit=100`\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((body) => {\n        setResults(body);\n        setLoading(false);\n      });\n  }, [searchWord, modeParam]);\n\n  // if no word data\n  if (!results) {\n    // if not loading, assume word not found\n    if (!loading) {\n      return (\n        <div className=\"text-center w-full h-full p-12\">\n          <img\n            alt=\"Word not found.\"\n            className=\"py-12 w-1/2 md:w-1/3 m-auto select-none\"\n            src={NotFound}\n          ></img>\n          <div className=\"text-lg select-none mb-6\">Word not found.</div>\n        </div>\n      );\n    }\n    // otherwise, render the loading spinner\n    else {\n      return <Loading />;\n    }\n  }\n\n  return (\n    <div\n      className={\n        modeParam === 'simplified' ? 'chinese-serif-sc' : 'chinese-serif-tc'\n      }\n    >\n      {/* Results container */}\n      <div className=\"w-full md:w-3/4 mx-auto mb-8\">\n        {/* Report result count */}\n        <div className=\"text-2xl mt-12 mb-2 ml-6 font-bold english-serif\">\n          {results.length} results for \"{searchParam}\"\n        </div>\n        {/* Render results */}\n        {results.length > 0 && searchParam !== '' && (\n          <div\n            className={`shadow-lg z-10 text-left bg-white dark:bg-dark-500 border-2 w-full border-black dark:border-gray-200 p-2`}\n            style={{ marginTop: '-2px' }}\n          >\n            {results.map((result, index) => {\n              return (\n                <Link\n                  to={`/word/${encodeURI(result[modeParam])}?mode=${modeParam}`}\n                  className={`${linkHover} ${linkHoverScale} block bg-white dark:bg-dark-500 dark-hover:bg-dark-800`}\n                  key={index}\n                >\n                  <div className={`px-4 pt-3 pb-2 leading-6`}>\n                    <div className=\"font-semibold\">\n                      {/* Result character */}\n                      <div className=\"text-2xl inline\">{result[modeParam]}</div>\n                      {/* Pinyin */}\n                      <div className=\"pl-2 text-xl inline\">\n                        {pinyinify(result['pinyin'])}\n                      </div>\n                    </div>\n                    {/* Definition */}\n                    <div className=\"text-light-500 dark:text-light-700 text-lg leading-5\">\n                      {result['definition']}\n                    </div>\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Results;\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ScrollToTop() {\n  const { pathname, search } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname, search]);\n\n  return null;\n}\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\n// Import global components\nimport Navbar from './components/Navbar';\n\n// Import pages\nimport Home from './pages/Home';\nimport NotFound from './pages/NotFound';\nimport Word from './pages/Word';\nimport Results from './pages/Results';\n\n// Import reset scroll component\nimport ScrollToTop from './components/ScrollToTop';\n\n// Import dark mode\nimport DarkModeProvider from './components/DarkMode';\n\n// Global CSS\nimport './App.css';\n\n// Window dimensions\nimport WindowDimensionsProvider from './components/WindowDimensionsProvider';\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <ScrollToTop />\n      <WindowDimensionsProvider>\n        <DarkModeProvider>\n          <Route\n            render={({ location }) => {\n              return !['/'].includes(location.pathname) && <Navbar />;\n            }}\n          />\n          <Switch>\n            {/* Public Routes */}\n            <Route exact path=\"/\">\n              {<Home />}\n            </Route>\n\n            <Route path=\"/word/:word\">{<Word />}</Route>\n\n            <Route path=\"/results\">{<Results />}</Route>\n\n            {/* Catch-all Route */}\n            <Route path=\"/\">\n              <NotFound />\n            </Route>\n          </Switch>\n        </DarkModeProvider>\n      </WindowDimensionsProvider>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}